name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag name for the release (e.g., v1.0.0-beta.1)'
        required: true
        type: string

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            runtime: win-x64
            artifact-name: secretstool-win-x64
            executable-name: SecretsTool.exe
          - os: windows-latest
            runtime: win-arm64
            artifact-name: secretstool-win-arm64
            executable-name: SecretsTool.exe
          - os: macos-latest
            runtime: osx-x64
            artifact-name: secretstool-macos-x64
            executable-name: SecretsTool
          - os: macos-latest
            runtime: osx-arm64
            artifact-name: secretstool-macos-arm64
            executable-name: SecretsTool
          - os: ubuntu-latest
            runtime: linux-x64
            artifact-name: secretstool-linux-x64
            executable-name: SecretsTool

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore SecretsTool.csproj

    - name: Build
      run: dotnet build SecretsTool.csproj --configuration Release --no-restore

    - name: Publish
      shell: bash
      run: |
        dotnet publish SecretsTool.csproj \
          --configuration Release \
          --runtime ${{ matrix.runtime }} \
          --self-contained true \
          --output ./publish/${{ matrix.runtime }} \
          -p:PublishSingleFile=true \
          -p:PublishTrimmed=true \
          -p:TrimMode=link

    - name: Create archive (Windows)
      if: runner.os == 'Windows'
      run: |
        cd publish/${{ matrix.runtime }}
        7z a ../../${{ matrix.artifact-name }}.zip ${{ matrix.executable-name }}

    - name: Create archive (Unix)
      if: runner.os != 'Windows'
      run: |
        cd publish/${{ matrix.runtime }}
        chmod +x ${{ matrix.executable-name }}
        tar -czf ../../${{ matrix.artifact-name }}.tar.gz ${{ matrix.executable-name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          ${{ matrix.artifact-name }}.zip
          ${{ matrix.artifact-name }}.tar.gz
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get tag name
      id: tag
      shell: bash
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag_name=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Check if release is beta
      id: beta_check
      shell: bash
      run: |
        if [[ "${{ steps.tag.outputs.tag_name }}" == *"beta"* ]] || [[ "${{ steps.tag.outputs.tag_name }}" == *"alpha"* ]] || [[ "${{ steps.tag.outputs.tag_name }}" == *"rc"* ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi

    - name: Prepare release files
      shell: bash
      run: |
        mkdir -p release-files
        find ./artifacts -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} ./release-files/ \;
        ls -la ./release-files/

    - name: Generate checksums
      shell: bash
      run: |
        cd release-files
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag_name }}
        name: GitLab Secrets Tool ${{ steps.tag.outputs.tag_name }}
        draft: false
        prerelease: ${{ steps.beta_check.outputs.is_prerelease }}
        generate_release_notes: true
        body: |
          ## GitLab Secrets Tool ${{ steps.tag.outputs.tag_name }}
          
          A .NET 8 CLI tool that fetches GitLab CI/CD project-level variables and stores them in .NET user secrets.
          
          ### Downloads
          
          Choose the appropriate version for your platform:
          
          **Windows:**
          - `secretstool-win-x64.zip` - Windows x64
          - `secretstool-win-arm64.zip` - Windows ARM64
          
          **macOS:**
          - `secretstool-macos-x64.tar.gz` - macOS Intel
          - `secretstool-macos-arm64.tar.gz` - macOS Apple Silicon
          
          **Linux:**
          - `secretstool-linux-x64.tar.gz` - Linux x64
          
          ### Installation
          
          1. Download the appropriate archive for your platform
          2. Extract the executable
          3. Add to your PATH or run directly
          
          ### Usage
          
          ```bash
          # Basic usage
          ./SecretsTool --project-id YOUR_PROJECT_ID --token YOUR_GITLAB_TOKEN
          
          # With environment variable
          export GITLAB_TOKEN=your_token
          ./SecretsTool --project-id YOUR_PROJECT_ID
          
          # See all options
          ./SecretsTool --help
          ```
          
          ### Verification
          
          All binaries are signed and checksums are provided in `checksums.txt`.
        files: |
          release-files/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
